/**
 * Author: Bibrak Qamar Chandio
 * 		   PhD Student Indiana University, Bloomington, IN
 *		   10-Dec-2016
 *
 * Summary:
 *       Computes Matrix Vector Multiplication using Diagonal Format.
 */
package mvmdia;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

class MVM_DIAKernel extends Kernel {

	MVM_DIAKernel(KernelParameters parameters) {
		super(parameters);

		// Input
		DFEVar DIA_lower = io.input("DIA_lower", dfeFloat(8, 24));
		DFEVar DIA_centre = io.input("DIA_centre", dfeFloat(8, 24));
		DFEVar DIA_upper = io.input("DIA_upper", dfeFloat(8, 24));
		
		DFEVar Vector_b = io.input("Vector_b", dfeFloat(8, 24));

		DFEVar size = io.scalarInput("size", dfeUInt(32));
        
		// Data
		DFEVar prevOriginal = stream.offset(Vector_b, -1);
		DFEVar nextOriginal = stream.offset(Vector_b, 1);

		// Control
		DFEVar count = control.count.simpleCounter(32, size);

		DFEVar aboveLowerBound = count > 0;
		DFEVar belowUpperBound = count < size - 1;

		DFEVar prev = aboveLowerBound ? prevOriginal : 0;
		DFEVar next = belowUpperBound ? nextOriginal : 0;

        DFEVar mul = (DIA_lower * prev) + 
		             (DIA_centre * Vector_b) +
		             (DIA_upper * next);  
        
		io.output("Vector_x", mul, dfeFloat(8, 24));
	}
}
